/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : usbd_storage_if.c
  * @version        : v1.0_Cube
  * @brief          : Memory management layer.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "usbd_storage_if.h"

/* USER CODE BEGIN INCLUDE */

/* USER CODE END INCLUDE */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  * @brief Usb device.
  * @{
  */

/** @defgroup USBD_STORAGE
  * @brief Usb mass storage device module
  * @{
  */

/** @defgroup USBD_STORAGE_Private_TypesDefinitions
  * @brief Private types.
  * @{
  */

/* USER CODE BEGIN PRIVATE_TYPES */

/* USER CODE END PRIVATE_TYPES */

/**
  * @}
  */

/** @defgroup USBD_STORAGE_Private_Defines
  * @brief Private defines.
  * @{
  */

#define STORAGE_LUN_NBR                  1
#define STORAGE_BLK_NBR                  32768 // 4 meg
#define STORAGE_BLK_SIZ                  512

/* USER CODE BEGIN PRIVATE_DEFINES */

#define FLASH_SECTOR_SIZE                8192
#define SIZE_OF_RAM                      0x400000
#define SIZE_OF_SRAM_IN_BLOCKS           SIZE_OF_RAM / STORAGE_BLK_SIZ
#define SECTOR_SHIFT                     4
#define SECTOR_MASK                      0x1ff
#define MAX_BLOCK_PER_SECTOR_INDEX       15

/* USER CODE END PRIVATE_DEFINES */

/**
  * @}
  */

/** @defgroup USBD_STORAGE_Private_Macros
  * @brief Private macros.
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */

/* USER CODE END PRIVATE_MACRO */

/**
  * @}
  */

/** @defgroup USBD_STORAGE_Private_Variables
  * @brief Private variables.
  * @{
  */

/* USER CODE BEGIN INQUIRY_DATA_FS */
/** USB Mass storage Standard Inquiry Data. */
const int8_t STORAGE_Inquirydata_FS[] = {/* 36 */

  /* LUN 0 */
  0x00,
  0x80,
  0x02,
  0x02,
  (STANDARD_INQUIRY_DATA_LEN - 5),
  0x00,
  0x00,
  0x00,
  'S', 'T', 'M', ' ', ' ', ' ', ' ', ' ', /* Manufacturer : 8 bytes */
  'P', 'r', 'o', 'd', 'u', 'c', 't', ' ', /* Product      : 16 Bytes */
  ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
  '0', '.', '0' ,'1'                      /* Version      : 4 Bytes */
};
/* USER CODE END INQUIRY_DATA_FS */

/* USER CODE BEGIN PRIVATE_VARIABLES */

volatile uint16_t* sram = (uint16_t*)0x68000000;
volatile uint16_t* flash = (uint16_t*)0x6C000000;

volatile uint16_t dummy;


/* USER CODE END PRIVATE_VARIABLES */

/**
  * @}
  */

/** @defgroup USBD_STORAGE_Exported_Variables
  * @brief Public variables.
  * @{
  */

extern USBD_HandleTypeDef hUsbDeviceFS;

/* USER CODE BEGIN EXPORTED_VARIABLES */

/* USER CODE END EXPORTED_VARIABLES */

/**
  * @}
  */

/** @defgroup USBD_STORAGE_Private_FunctionPrototypes
  * @brief Private functions declaration.
  * @{
  */

static int8_t STORAGE_Init_FS(uint8_t lun);
static int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size);
static int8_t STORAGE_IsReady_FS(uint8_t lun);
static int8_t STORAGE_IsWriteProtected_FS(uint8_t lun);
static int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
static int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
static int8_t STORAGE_GetMaxLun_FS(void);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void HAL_FSMC_MspDeInit(void);
void HAL_FSMC_MspInit(void)

void setYellow() {
	HAL_GPIO_WritePin (LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
}

void clearYellow() {
	HAL_GPIO_WritePin (LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
}

void setRed() {
	HAL_GPIO_WritePin (LED_RED_GPIO_Port, LED_RED_Pin, 0);
}

void clearRed() {
	HAL_GPIO_WritePin (LED_RED_GPIO_Port, LED_RED_Pin, 1);
}

void flashSectorErase (uint16_t sector) {
  flash[0x555] = 0xAA;
  flash[0x2AA] = 0x55;
  flash[0x555] = 0x80;
  flash[0x555] = 0xAA;
  flash[0x2AA] = 0x55;
  flash[sector] = 0x50;
  while ((flash[0]&0x80) == 0) dummy=1;
}

void flashWordProgram ( uint32_t address, uint16_t data ) {
  flash[0x555] = 0xAA;
  flash[0x2AA] = 0x55;
  flash[0x555] = 0xA0;
  flash[address] = data;
  while ((flash[address]&0x80) != (data & 0x80)) {
    dummy = address;
  }
}

/* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */

/**
  * @}
  */

USBD_StorageTypeDef USBD_Storage_Interface_fops_FS =
{
  STORAGE_Init_FS,
  STORAGE_GetCapacity_FS,
  STORAGE_IsReady_FS,
  STORAGE_IsWriteProtected_FS,
  STORAGE_Read_FS,
  STORAGE_Write_FS,
  STORAGE_GetMaxLun_FS,
  (int8_t *)STORAGE_Inquirydata_FS
};

/* Private functions ---------------------------------------------------------*/
/**
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
  /* USER CODE END 2 */
}

/**
  * @brief  .
  * @param  lun: .
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
  *block_size = STORAGE_BLK_SIZ;
  return (USBD_OK);
  /* USER CODE END 3 */
}

/**
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}

/**
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}

/**
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 6 */
  uint16_t tmp;
  setYellow();
  HAL_GPIO_WritePin (STM32_ENABLE_GPIO_Port, STM32_ENABLE_Pin, 0);
  for (int i=0; i < blk_len; i++) {
	  for (int j=0; j < STORAGE_BLK_SIZ; j+=2) {
		  if (blk_addr >= (STORAGE_BLK_NBR >> 1)) {
			  tmp = flash[(blk_addr+i-1024)*STORAGE_BLK_SIZ + j];
		  } else {
			  tmp = sram[(blk_addr+i)*STORAGE_BLK_SIZ + j];
		  }
		  buf[i*STORAGE_BLK_SIZ + j] = tmp >> 8;
		  buf[i*STORAGE_BLK_SIZ + j + 1] = tmp;
	  }
  }
  HAL_GPIO_WritePin (STM32_ENABLE_GPIO_Port, STM32_ENABLE_Pin, 1);
  clearYellow();
  return (USBD_OK);
  /* USER CODE END 6 */
}

/**
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
	  setRed();
	  // Disable busdriver so that we then can enable the FSMC onto the bus.
	  HAL_GPIO_WritePin (STM32_ENABLE_GPIO_Port, STM32_ENABLE_Pin, 0);
	  HAL_FSMC_MspInit();

	  if (blk_addr >= (STORAGE_BLK_NBR >> 1)) {
		  blk_addr -= SIZE_OF_SRAM_IN_BLOCKS;
		  uint16_t writebackBuffer[4096];
		  int endSector, startSector;
		  int bufCnt=0;
		  startSector = blk_addr >> SECTOR_SHIFT;
		  endSector = (blk_addr + blk_len -1) >> SECTOR_SHIFT;

		  for (int sector = startSector; sector <= endSector; sector++) {
			  int fromBlock, toBlock;
			  if (sector == startSector) {
				  fromBlock = blk_addr & SECTOR_MASK;
			  } else {
				  fromBlock = 0;
			  }
			  if (sector == endSector) {
				  toBlock = (blk_addr + blk_len -1) & SECTOR_MASK;
			  } else {
				  toBlock = MAX_BLOCK_PER_SECTOR_INDEX;
			  }
			  if ((fromBlock != 0) || (toBlock != MAX_BLOCK_PER_SECTOR_INDEX)) {
				  // Since we are not dealing with a full sector we have to readout the existing content from the flash
				  // prior to erasing this particular sector
				  for (int k=0; k<FLASH_SECTOR_SIZE; k++) {
					  writebackBuffer[k] = flash[sector*FLASH_SECTOR_SIZE + k];
				  }
			  }
			  flashSectorErase(sector);
			  for (int k = fromBlock * STORAGE_BLK_SIZ; k < (toBlock + 1) * STORAGE_BLK_SIZ; k+=2, bufCnt+=2) {
				  writebackBuffer[k] = (buf[bufCnt] << 8) | buf[bufCnt+1];
			  }
			  for (int k = 0; k < (sizeof writebackBuffer) ; k++) {
				  flashWordProgram ( sector + k,  writebackBuffer[k]);
			  }
		  }
	  } else { // SRAM
		  for (int i=0; i < blk_len; i++) {
			  for (int j=0; j < STORAGE_BLK_SIZ; j+=2) {
				  uint16_t tmp;
				  tmp = (buf[i*STORAGE_BLK_SIZ + j] << 8) | buf[i*STORAGE_BLK_SIZ + j+1];
					  sram[(blk_addr+i)*STORAGE_BLK_SIZ + j] = tmp;
				  }
			  }
		  }
	  }
	  // Make sure we turn off FSMC before handing over the bus.
	  HAL_FSMC_MspDeInit();
	  HAL_GPIO_WritePin (STM32_ENABLE_GPIO_Port, STM32_ENABLE_Pin, 1);
	  clearRed();
  return (USBD_OK);
  /* USER CODE END 7 */
}

/**
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
